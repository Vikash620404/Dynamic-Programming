**)Recursion with memoziation

class Main{
public static int knapSack(int[]weight,int[]value,int n,int capicity){
int[][]store=new int[n+1][capicity+1];
for(int i=0;i<n+1;i++){
for(int j=0;j<capicity+1;j++){
store[i][j]=0;
if(store[n][capicity]!=0){
return store[n][capicity]
}
}
}
if(weight[n-1]<=capicity){
store[n][capicity]=Math.max(value[n-1]+knapSack(weight,value,n-1,capicityweight[n-1]),knapSack(weight,value,n-1,capicity));
}else if(weight[n-1]>capicity){
store[n][capicity]=knapSack(weight,value,n-1,capicity);
}
return store[n][capicity]
}
public static void main(String[]args){
int[]value{20,5,10,40,15,25};
int[]weight{1,2,3,8,7,4,};
int w=10;
System.out.println(knapSack(weight,value,n,capicity));
}


}

***)Top down Approach
public static int knapSack(int[]weight,int[]value,int capicity,int n){
int[][]store=new int[n+1][capicity+1];
for(int i=0;i<n+1;i++){
for(int j=0;j<capicity+1;j++){
if(i==0||j==0){
store[i][j]=0;
}else if (weight[i - 1] <= capicity){
                    K[i][capicity]
                        = Math.max(value[i - 1]
                         + store[i - 1][capicity - weight[i - 1]],
                         store[i - 1][capicity]);
                else
                    store[i][capicity] = store[i - 1][capicity];
            }
        }
 
        return K[n][capicity];
}
// Time complexity=O(n^2)
//space Complexity=O(n)
